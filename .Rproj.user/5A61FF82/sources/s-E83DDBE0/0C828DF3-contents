#library(Ptolemy)
library(Rfast)
load("../../alldata.Rdata")

source("~/r-notebooks/nanostring_cpp_opti/just_rcpp/R/ScoreTest.R")
source("~/r-notebooks/nanostring_cpp_opti/just_rcpp/R/PoisBG.R")
source("~/r-notebooks/nanostring_cpp_opti/just_rcpp/R/RcppExports.R")
source("~/r-notebooks/nanostring_cpp_opti/just_rcpp/R/NBthDE.R")
Rcpp::sourceCpp("src/NBthDEOptPara.cpp")

## load data

library(Matrix)

#neg0 <- as(neg, "sparseMatrix")
neg <- as.matrix(neg0)

#raw0 <- as(raw, "sparseMatrix")
raw <- as.matrix(raw0)
# 1.	For each negative probe, calculate total count for all cells. Calculate the median mu.
mu <- median(rowSums(neg0))

# 2.	For each positive probe, calculate total count for all cells.
pos_count <- rowSums(raw0)

# 3.	Select positive probes with total count less than mu, call them low positive probes
indx_low_pos <- which(pos_count < mu)
mean(pos_count < mu)

# 4.	Combine low positive probes and negative probes, fit the Poisson Background model, implement the common diagnostics procedure
negmod <- fitPoisBG(rbind(neg0, raw0[indx_low_pos, ]), size_scale = "sum") # use sum in SMI data. use first will lead to distortion in data
negdiag2 <- diagPoisBG(negmod, generate_ppplot = FALSE)


# 5. perform score tests
negmod2 <- fitPoisBG(neg0, size_scale = "sum") # use sum in SMI data. use first will lead to distortion in data
negmod2$sizefact <- negmod$sizefact

sc <- BGScoreTest(raw, negmod2, adj = 1, removeoutlier = FALSE, useprior = TRUE)
# and maybe try different combinations of removeoutlier and useprior


high_features <- ((sc$scores > quantile(sc$scores, probs = 0.4)) & (sc$scores < quantile(sc$scores, probs = 0.95))) %>%
  which() %>%
  names()

features_high <- ((sc$scores > quantile(sc$scores, probs = 0.4)) & (sc$scores < quantile(sc$scores, probs = 0.95))) %>%
  which() %>%
  names()

# calculate the sizefact
# estimate a_j from the poisson threshold model
sizefact0 <- negmod$sizefact
gamma0 <- mean(negmod2$featfact)
gamma_features <- rowsums(raw[high_features,]) - gamma0
sizefact <- (colsums(raw[high_features,])-length(high_features)*gamma0*sizefact0)/sum(gamma_features)





# confirm the sum is 1
sum(sizefact0)
sum(sizefact)

# percentage of negative
sum(sizefact<0)/length(sizefact)

# replace negative by 0
sizefact[sizefact<0] <- 0

# rescale
gamma_features <- gamma_features*sum(sizefact)
sizefact <- sizefact/sum(sizefact)

# compute the correlation between the size facts between the background and the postive probes
plot(sizefact0, sizefact,
     main = paste0("cor = ", round(cor(sizefact0, sizefact), 3)))


#(0.95-0.4)*0.9+0.4
# perform DE
# high_ROIs <- names(which(quantile(gamma_features, probs = 0.90) * sizefact > 2))
annot <- as.data.frame(annot)
rownames(annot) <- colnames(raw)

annot$fov|>table()

high_ROIs <- names(which(sizefact[annot$fov%in%c(1:17)]>0))




features_all <- rownames(raw)




NBthDEmod2 <- fitNBthDE(form = ~fov,
                        annot=annot[high_ROIs, ],
                        object=raw[, high_ROIs],
                        probenum = rep(1, NROW(raw[, high_ROIs])),
                        features_high = features_high,
                        features_all = features_all,
                        sizefact_start=sizefact[high_ROIs],
                        sizefact_BG=sizefact0[high_ROIs],
                        threshold_mean = gamma0,
                        preci2=10000,
                        prior_type="contrast",
                        covrob=FALSE,
                        preci1con=1/25,
                        sizefactrec=FALSE,
                        sizescalebythreshold=TRUE)

